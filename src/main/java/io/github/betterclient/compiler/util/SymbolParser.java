package io.github.betterclient.compiler.util;

import io.github.betterclient.compiler.Compiler;
import io.github.betterclient.compiler.exception.CompilerException;
import io.github.betterclient.compiler.symbol.*;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class SymbolParser  {
    /**
     * Parses symbols in given code
     * @see io.github.betterclient.compiler.symbol
     * @param code code to find in
     * @return returns a list of symbols.
     * <p>
     * If {@link UsesSymbol} exists it is forced to be the first element
     * if not: there is no usages(how)
     */
    public static List<Symbol> parseSymbols(String code) {
        code = BracketUtil.removeAllBrackets(code);
        code = Arrays.stream(code.split("\n")).filter(string -> !string.trim().isEmpty()).collect(Collectors.joining("\n"));
        code = code.replaceAll("\r", "");

        List<Symbol> declarationUtils = new ArrayList<>();

        boolean hasSeenOtherThanUses = false;
        boolean hasSeenExtend = false;
        boolean hasSeenImplement = false;
        UsesSymbol usesSymbol = new UsesSymbol();

        for(String decl : code.split("\n")) {
            decl = decl.replaceFirst("^\\s+", ""); //Remove spaces generated by '\n' to ' '

            if (decl.startsWith("using")) {
                if (hasSeenOtherThanUses) throw new CompilerException("\"using\" should be the first statement in the code.");

                usesSymbol.add(decl);
                if (declarationUtils.isEmpty()) declarationUtils.add(usesSymbol);
            } else {
                if (!hasSeenOtherThanUses && Compiler.DEBUG_OUT) System.out.println("Found " + usesSymbol.mappings.size() + " imports.");
                hasSeenOtherThanUses = true;
            }

            if (decl.startsWith("implements")) {
                if (hasSeenImplement) throw new CompilerException("Only allowed to have 1 implement.");
                hasSeenImplement = true;

                ImplementingSymbol a;
                declarationUtils.add(a = new ImplementingSymbol(decl));

                if (Compiler.DEBUG_OUT) System.out.println("Found " + a.size + " interfaces to implement.");
            } else if (decl.startsWith("extend")) {
                if (hasSeenExtend) throw new CompilerException("Only allowed to have 1 extend.");
                hasSeenExtend = true;

                declarationUtils.add(new ExtendingSymbol(decl));

                if (Compiler.DEBUG_OUT) System.out.println("Found superclass");
            } else {
                if (hasSeenOtherThanUses) declarationUtils.add(new FieldSymbol(decl));
            }
        }

        return declarationUtils;
    }

    public static int countArrays(String input) {
        int count = 0;
        int index = input.indexOf("[]");

        while (index != -1) {
            count++;
            index = input.indexOf("[]", index + 2);
        }

        return count;
    }
}